<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold text-center mb-6">Add a New Book</h1>
    <form id="bookForm" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <div class="mb-4">
            <h2 class="text-lg font-semibold mb-4">Select an Image</h2>
            <input type="file" id="imageInput" accept="image/*" class="hidden" onchange="previewImage(event)">
            <label for="imageInput" class="flex flex-col items-center justify-center cursor-pointer border-2 border-dashed border-gray-300 rounded-lg p-4 hover:bg-gray-50 transition">
                <span class="text-gray-500">Click to upload an image</span>
                <span class="text-gray-400 text-sm">or drag and drop</span>
            </label>
            <div id="imagePreview" style="max-width: 100%; max-height: 300px; object-fit: contain;" class="mt-4 hidden">
                <img id="preview" src="" alt="Image Preview" class="w-[30%] aspect-ratio-2/1 h-auto rounded-lg shadow-md">
            </div>
        </div>

        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="title">Title:</label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="title" name="title" type="text" required>
        </div>

        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="description">Description:</label>
            <textarea class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="description" name="description" required></textarea>
        </div>

        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="author">Author:</label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="author" name="author" type="text" required>
        </div>

        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="category">Category:</label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="category" name="category" type="text" required>
        </div>

        <div class="mb-4">
            <h2 class="text-lg font-semibold mb-4">Upload PDF</h2>
            <input type="file" id="pdfInput" accept="application/pdf" class="mb-4 w-full border border-gray-300 rounded p-2" required>
        </div>

        <div class="flex items-center justify-between">
            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                Add Book
            </button>
            <div id="message" class="ml-4"></div>
        </div>
    </form>
</div>

<script>
    const apiKey = 'c512e5d79c9b393786fee62ff368b800'; // Replace with your ImgBB API key
    const imgApiUrl = 'https://api.imgbb.com/1/upload';
    const dropboxAccessToken = 'sl.CA5rzbAQ3tioTr7w81WSPPDC1qpbTxLZAvl_e0Lg0L8xlSvICyQNhuQHvMxVn1Y1ncwE7jq27SoDqzyEHCFdjWNEdRuWf3aFgzMqk3yKt42-NI7wI903XdY1eCocQ41rOA4IHZc4LjvT';
    let selectedImageFile;
    let selectedPdfFile;

    function previewImage(event) {
        const input = event.target;
        const preview = document.getElementById('preview');
        const imagePreview = document.getElementById('imagePreview');

        if (input.files && input.files[0]) {
            selectedImageFile = input.files[0]; // Store the selected image file
            const reader = new FileReader();
            reader.onload = function(e) {
                preview.src = e.target.result;
                imagePreview.classList.remove ('hidden');
            }
            reader.readAsDataURL(selectedImageFile);
        }
    }

    document.getElementById('bookForm').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission

        if (!selectedImageFile) {
            alert('Please select an image before adding a book.');
            return;
        }

        selectedPdfFile = document.getElementById('pdfInput').files[0]; // Get the selected PDF file
        if (!selectedPdfFile) {
            alert('Please select a PDF file before adding a book.');
            return;
        }

        const imgFormData = new FormData();
        imgFormData.append('image', selectedImageFile);
        imgFormData.append('key', apiKey);

        // Upload the image to ImgBB
        fetch(imgApiUrl, {
            method: 'POST',
            body: imgFormData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const imageUrl = data.data.url;

                // Now upload the PDF to Dropbox
                const pdfFormData = new FormData();
                pdfFormData.append('file', selectedPdfFile);
                pdfFormData.append('path', '/' + selectedPdfFile.name);
                pdfFormData.append('mode', 'add');

                fetch('https://content.dropboxapi.com/2/files/upload', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + dropboxAccessToken,
                        'Content-Type': 'application/octet-stream',
                        'Dropbox-API-Arg': JSON.stringify({
                            path: '/books-hub/' + selectedPdfFile.name,
                            mode: 'add',
                            autorename: true,
                            mute: false
                        })
                    },
                    body: selectedPdfFile
                })
                .then(response => response.json())
                .then(data => {
                    if (data.id) {
                        // Now send the book data along with the image URL to your backend
                        const bookData = {
                            title: document.getElementById('title').value,
                            author: document.getElementById('author').value,
                            description: document.getElementById('description').value,
                            category: document.getElementById('category').value,
                            imageUrl: imageUrl,
                            bookUrl: 'https://www.dropbox.com/s/' + data.id // Construct the PDF URL
                        };

                        // Send the book data to your backend
                        fetch('/books', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(bookData),
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                displayMessage('Book added successfully!', 'success');
                                // Redirect to a success page after a short delay
                                setTimeout(() => {
                                    window.location.href = '/books'; // Change to your desired URL
                                }, 2000);
                            } else {
                                displayMessage(data.message || 'Failed to add book.', 'error');
                            }
                        })
                        .catch(error => console.error('Error sending to backend:', error));
                    } else {
                        console.error('Error uploading PDF:', data);
                        displayMessage('Failed to upload PDF.', 'error');
                    }
                })
                .catch(error => console.error('Error uploading PDF:', error));
            } else {
                console.error('Error uploading image:', data.error);
                displayMessage('Failed to upload image.', 'error');
            }
        })
        .catch(error => console.error('Error uploading image:', error));
    });

    function displayMessage(message, type) {
        const messageDiv = document.getElementById('message');
        messageDiv.textContent = message;
        messageDiv.className = type === 'success' ? 'text-green-500' : 'text-red-500';
    }
</script>
